openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/user/theme:
    post:
      summary: 'Set theme'
      description: "Pour mettre à jour le thème d'un utilisateur"
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Themes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                theme_id:
                  type: integer
                  description: ''
                  example: 13
              required:
                - theme_id
  /api/themes:
    get:
      summary: 'Get themes'
      description: 'Pour obtenir tout les thèmes disponibles'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Themes
  /api/absences:
    get:
      summary: 'Get absences'
      description: 'Retourne un json contenant une liste des absences.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Absences
  /api/login:
    post:
      summary: login
      description: 'Authentication for a user'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'The Gaps username of the user.'
                  example: cupiditate
                password:
                  type: string
                  description: 'The Gaps password of the user.'
                  example: veniam
                classroom_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ypwbnxuzqdkwvmmblpxiwdefnnqliutyrmrkgwffqylgwtnisbdhqcphebupbojtwttxjvpqeaupqcuvruinoyuwmkkvjp
              required:
                - username
                - password
  /api/register:
    post:
      summary: register
      description: 'Register a new user'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'The Gaps username of the user.'
                  example: qui
                password:
                  type: string
                  description: 'The Gaps password of the user.'
                  example: velit
                classroom_name:
                  type: string
                  description: 'The class of the user.'
                  example: doloribus
              required:
                - username
                - password
                - classroom_name
  /api/me:
    get:
      summary: me
      description: 'Get actual authenticate user'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Authentication
  /api/logout:
    get:
      summary: logout
      description: 'Logout the actual authenticate user'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Authentication
  /api/classrooms:
    get:
      summary: 'Get classrooms'
      description: 'Display a listing of the resource.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  message: Classroom
                  data:
                    classrooms:
                      -
                        name: M49-1
                        total_persons: 1
                        users:
                          -
                            id: 69
                            username: vincent.tarrit
                            gaps_id: 17486
                            role: student
                            card_money: 0
                            pivot:
                              classroom_name: M49-1
                              user_id: 69
                            theme:
                              id: 1
                              primary:
                                id: 1
                                value: '#000000'
                              secondary:
                                id: 2
                                value: '#ffffff'
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Classroom
                  data:
                    type: object
                    example:
                      classrooms:
                        -
                          name: M49-1
                          total_persons: 1
                          users:
                            -
                              id: 69
                              username: vincent.tarrit
                              gaps_id: 17486
                              role: student
                              card_money: 0
                              pivot:
                                classroom_name: M49-1
                                user_id: 69
                              theme:
                                id: 1
                                primary:
                                  id: 1
                                  value: '#000000'
                                secondary:
                                  id: 2
                                  value: '#ffffff'
      tags:
        - Autres
  /api/update/gaps/absences:
    get:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Autres
  /api/classrooms/setUser:
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Autres
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: lnxhdywrjiuuequlfmrvcc
              required:
                - name
  '/api/telegram/{token}':
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Autres
    parameters:
      -
        in: path
        name: token
        description: ''
        example: '5531545475:AAFTPbgpcDrRrKnBOf_hYhibJK_HKqW_ED4'
        required: true
        schema:
          type: string
  /api/calendars:
    get:
      summary: getCalendars
      description: "Retourne un json contenant une liste des calendrier. La liste correspond à l'ensemble des évènements de tous les calendriers que suit l'utilisateur."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "[\n \"id\" => 1,\n \"name\" => \"Calendrier 1\",\n \"events\" => [\n     \"id\" => 1,\n     \"title\" => \"Event 1\",\n     \"start\" => \"2020-01-01\",\n     \"end\" => \"2020-01-01\",\n     \"description\" => \"Description 1\",\n     \"location\" => \"Location 1\",\n     \"calendar_id\" => 1,\n     \"created_at\" => \"2020-01-01\",\n     \"updated_at\" => \"2020-01-01\",\n  ]\n]"
      tags:
        - Calendrier
    post:
      summary: 'Store calendar'
      description: 'Crée un calendrier.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Calendrier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: hzojverodhindhnewljuwehjemfcgewxzxkbzeftduprzqjcvqpldrgirhqvwtbyymknqfqszpmrbfcmvpbumnxdjahgx
              required:
                - name
  '/api/calendars/{id}':
    get:
      summary: 'Show calendar'
      description: 'Retourne un json contenant un calendrier.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Calendrier
    put:
      summary: 'Update calendar'
      description: 'Update the specified resource in storage.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Calendrier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ysyqirsupukeosrdpavapcfeskpwkdienlrdgfzbyewmalvpfqskfeztgcyumepmtgczhppujbhqyuovqywkdedypakkksickavroxfxozefzzxyfvzybdbqniubpwgkzwawivdbzbonuhxqpvfxquycikuglgxvosdrqltkhuysfoqbshxmkvfoxhsdderesrzbgr
              required:
                - name
    delete:
      summary: 'Delete calendar'
      description: 'Remove the specified resource from storage.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Calendrier
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the calendar.'
        example: 1
        required: true
        schema:
          type: integer
  /api/calendars/share:
    post:
      summary: 'Share calendar'
      description: 'Partage un calendrier avec un autre utilisateur.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Calendrier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                calendar_id:
                  type: integer
                  description: 'ID du calendrier à partager.'
                  example: 2
                user_id:
                  type: integer
                  description: "ID de l'utilisateur à qui partager le calendrier."
                  example: 17
                can_own:
                  type: boolean
                  description: ''
                  example: false
                can_view:
                  type: boolean
                  description: ''
                  example: true
              required:
                - calendar_id
                - user_id
                - can_own
                - can_view
  /api/events:
    get:
      summary: 'Get events'
      description: "Retourne un json contenant une liste des évènements. La liste correspond à l'ensemble des évènements de tous les calendriers que suit l'utilisateur."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "[\n \"id\" => 1,\n \"name\" => \"Calendrier 1\",\n \"events\" => [\n     \"id\" => 1,\n     \"title\" => \"Event 1\",\n     \"start\" => \"2020-01-01\",\n     \"end\" => \"2020-01-01\",\n     \"description\" => \"Description 1\",\n     \"location\" => \"Location 1\",\n     \"calendar_id\" => 1,\n     \"created_at\" => \"2020-01-01\",\n     \"updated_at\" => \"2020-01-01\",\n  ]\n]"
      tags:
        - Evènements
    post:
      summary: 'Store event'
      description: "Enregistre un nouvel évènement dans la BDD\nSuccès: retourne un json contenant l'évènement créé\nFail: erreur"
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "[\n\"success\" => true,\n\"message\" => \"event created:\",\n\"data\" => [\n    \"title\" => \"EventTitle\",\n     \"description\" => \"Une belle description\",\n     \"start\" => \"1901-01-01T00:00Z\",\n     \"end\" => \"1901-01-03T00:00Z\",\n     \"location\" => \"S149\",\n     \"calendar_id\" => 1,\n     \"updated_at\" => \"2022-05-25T13:09:40.000000Z\",\n     \"created_at\" => \"2022-05-25T13:09:40.000000Z\",\n     \"id\" => 142\n  ]\n]"
      tags:
        - Evènements
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xxioqkosulmajnkbexnjjpetvllbnyjzlwdsovtvylnuxhjdsnfdspzenicgxykyhqaeccorrabjnsvdzsturhpbnbhlsengiuxklvcopsaugeuumlantigswcdxdxjdehfdmqovrkuilaxkmqiamrugbkcvkxj
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: uokgpyqbzakyhaphkjqeybipcegtkludylfingntyyspxtxlubhsoqptxymhlvdhfcidkaxocidyyvjaamiwfzcafgqcpjuqowomkcdrqaebwlotyylmvgkihzpwyiqmazjpxrgtkxxexcrlgfixqsiccryemzhvlmcxymbgwylaietirptnfvexdhchpkdgklyftfzelpoihyrzrzlmtdhxrpzqbatpgxazhmyymimliczerwsvnykycxefsduqaaifstgxxshjstpnpvvsqngpikexkgnypadbgtrpyzikbbovutfekwqqzfngdnrjcmnrrqmkygsmqfcnusetfeewvndvjbvaebjehdqayzvwrnpdmombktnzwfscmjfajoyugeaqmczzedezkbbprwnpxzmtqsugunbwrhwvgscpjfvsafzbtqbsalwygdpxymrtjcykuxicucstafzlmevnyreofywhsozagzqfvdaojopauqwshcqtzwldprgqmeqwxtiqpurqsndnqkfyrhvimbhkqbralhlihuanmphnawmvangaajpbimswdotywnjkqfoahetzuptgsghuaqepuytmnmfgvrmkmrcmnubrzeejvtdzupclehnfzrqyinyqnwcnkksrdewodvkjldoqpognhqkuvqtcukqofpxomkeorhouaepexpybcgozkvfynokhlfxjkwofffnrfsmpykxzbebshiyusgmnvwdcatiypgjlirqaiecolsotpehxhxzczvhrba
                start:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2022-05-31T13:04:12'
                end:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2022-05-31T13:04:12'
                location:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: iteslukzlhjebocsitndlvocyhhqytynmmzoskmxpzvghhliipglzuskaksbmbfmqjruhmgpzwksncbsmlzmecrzwfpgewnlkipegcnqnfysvdxapirptxfcrvvzteefuejstckzfxpkvqwgigvpncefovzqiodydcwvmlyngz
                calendar_id:
                  type: string
                  description: ''
                  example: facere
              required:
                - title
                - description
                - start
                - end
                - location
                - calendar_id
  '/api/events/{id}':
    get:
      summary: 'Show event'
      description: 'Display the specified resource.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Evènements
    put:
      summary: 'Update event'
      description: 'Update the specified resource in storage.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Evènements
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: gkpmnrufucwmcujxmstuyajufylkoxdhbmgkxhmulcemdtjhmjbmidnpjhtzgxwsuyhfunvsqzaczwycqznmagviamtqwqdvgrylcvctniexobmxtspimmwclygbtbzfepaqzvyigfhdcwhwqonzexlmuflmjngqakurplhqfgxcxywdcsfjgflxjgtsmvouivnohhsoyvyrbreufhjioacjpzjbimmborrxqncrjwclgqexy
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: gvbwrttrujkyulipxwibrvyebipskyeswdyjlqcdklnfrdpyve
                start:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2022-05-31T13:04:12'
                end:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2022-05-31T13:04:12'
                location:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: svtykdiclagpgclhgmbgbrtdyxwkodxsgkmniyymymcpxwforcrdhcyxursrpgrmujqokoafugcqanndkykdkppssdnhtwiepbquiyjilsrgzlboapdnnigujjspuqtoeujkhuftvgiwmwthtzoqoslwfnwismavkvskys
    delete:
      summary: 'Delete event'
      description: 'Remove the specified resource from storage.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Evènements
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the event.'
        example: 3083
        required: true
        schema:
          type: integer
  /api/update/gaps/events:
    get:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Gaps
  /api/update/gaps/marks:
    get:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Gaps
  /api/calendars/import:
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: multipart/form-data
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Gaps
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: jcedfeqveyogswmfjyfwgsgkxvlrtzywazlzbhrahwlrpxvqyhym
                ics:
                  type: string
                  format: binary
                  description: 'Must be a file.'
              required:
                - name
                - ics
  '/api/update/gaps/{token}':
    get:
      summary: 'Update all Gaps Cron'
      description: 'Pour forcer la mise à jour des données provenant de Gaps depuis un cron'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  message: 'All fetched'
                  data:
                    user: null
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'All fetched'
                  data:
                    type: object
                    example:
                      user: null
      tags:
        - Gaps
    parameters:
      -
        in: path
        name: token
        description: ''
        example: VGrxhPp9xuDb947JZADe7ESdBDkwdq
        required: true
        schema:
          type: string
  /api/update/gaps/all:
    get:
      summary: 'Update all Gaps'
      description: 'Pour forcer la mise à jour des données provenant de Gaps'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Gaps
  /api/mails:
    get:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Mail
  '/api/mails/{id}':
    get:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: Unauthenticated
                  data:
                    - sanctum
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthenticated
                  data:
                    type: array
                    example:
                      - sanctum
                    items:
                      type: string
      tags:
        - Mail
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the mail.'
        example: '25'
        required: true
        schema:
          type: string
  /api/mails/send:
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Mail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: string
                  description: 'Must be a valid email address.'
                  example: dean59@example.net
                subject:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xfshfcficjktrcmyqsmxjtfcfjofqoxdfeahsrabuaifgeziiuuojlfbbrjnoghlmahtkusbxzvmnilqokdthgckfrgawevctvnkemzldcdvpdktegzazojfvpzeedwtwljohdnnaeliqimnvuzwydujxjcmckiindsospevqvbkngkmpiqp
                message:
                  type: string
                  description: ''
                  example: quidem
              required:
                - to
                - subject
                - message
  /api/menu:
    get:
      summary: 'Get cafeteria menu'
      description: 'Retourne un json contenant une liste des menus.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "[\n {\n  \"2022-05-25\": [\n    {\n      \"id\": 1,\n      \"entry\": \"Crème de légumes\",\n      \"plate\": \"Quiche aux tomates et basilic\",\n      \"dessert\": \"Salade de fruits\",\n      \"date\": \"2022-05-25 23:32:08\",\n      \"menu\": {\n        \"id\": 1529386802506784773,\n        \"date\": \"2022-05-25 23:32:08\"\n      }\n    },\n    {\n      \"id\": 2,\n      \"entry\": \"Crème de légumes\",\n      \"plate\": \"Ailerons de poulet (CH) grillés, Sauce barbecue, Frites, Sauté de légumes de saison\",\n      \"dessert\": \"Salade de fruits\",\n      \"date\": \"2022-05-25 23:32:08\",\n      \"menu\": {\n        \"id\": 1529386800858468355,\n        \"date\": \"2022-05-25 23:32:08\"\n      }\n    }\n  ],\n}"
      tags:
        - 'Menu de la caf'
  /api/marks:
    get:
      summary: 'Get marks'
      description: "Retourne un json contenant une liste des notes de l'utilisateur."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"2020 - 2021\": [\n  {\n    \"id\": 1,\n    \"module_code\": \"MODULE\",\n    \"module_name\": \"TEXT\",\n    \"value\": X,\n    \"year_start\": X,\n    \"year_end\": X\n  },\n}"
      tags:
        - Notes
  /api/notification:
    post:
      summary: 'Send notification'
      description: "Permet d'envoyer une notification"
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {{token}}'
          schema:
            type: string
      responses: {  }
      tags:
        - Notifications
tags:
  -
    name: Themes
    description: "\nAPIs pour gérer les thèmes"
  -
    name: Absences
    description: "\nAPIs pour gérer les absences"
  -
    name: Authentication
    description: "\nAPIs pour gérer les authentifications"
  -
    name: Autres
    description: ''
  -
    name: Calendrier
    description: "\nAPIs pour gérer les calendrier"
  -
    name: Evènements
    description: "\nAPIs pour gérer les évènements"
  -
    name: Gaps
    description: "\nAPIs pour forcer la mis à jour de toutes les données de Gaps"
  -
    name: Mail
    description: "\nAPIs pour gérer les mails"
  -
    name: 'Menu de la caf'
    description: "\nAPIs pour gérer les menus"
  -
    name: Notes
    description: "\nAPIs pour gérer les notes"
  -
    name: Notifications
    description: "\nAPIs pour gérer les notifications"
